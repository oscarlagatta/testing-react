[{"content":"import { render, screen } from '@testing-library/react';\n\nfunction RoleExample() {\n  return (\n    <div>\n      <a href=\"/\">Link</a>\n      <button>Button</button>\n      <footer>ContentInfo</footer>\n      <h1>Heading</h1>\n      <header>Banner</header>\n      <img atl=\"description\" /> img\n      <input type='checkbox' /> checkbox\n      <input type='number' /> number\n      <input type='radio' /> radio\n      <input type='text' /> textbox\n      <li>Listitem</li> listitem\n      <ul>Listgroup</ul> listgroup\n    </div>\n  )\n}\n\n\nrender(<RoleExample />);","type":"code","id":"4tezb"},{"content":"\n\ntest('can find elementes by role', () => {\n  render(<RoleExample />);\n\n  const roles = [\n    'link',\n    'button',\n    'contentinfo',\n    'banner',\n    'img',\n    'checkbox',\n    'spinbutton',\n    'radio',\n    'textbox',\n    'listitem',\n    'list'\n  ];\n\n  for (let role of roles) {\n    const el = screen.getByRole(role);\n    expect(el).toBeInTheDocument();\n  }\n});","type":"code","id":"69wqo"},{"content":"function AccessibleName() {\n  return (\n    <div>\n    \n    <button>Submit</button>\n    <button>Cancel</button>\n    </div>\n  )\n}\n\nrender(<AccessibleName />);","type":"code","id":"rsjvb"},{"content":"test('can select by accessible name', () => {\n  render(<AccessibleName />);\n\n  const submitButton = screen.getByRole('button', {\n    name: /submit/i\n  });\n\n\n  const cancelButton = screen.getByRole('button', {\n    name: /cancel/i\n  });\n\n  expect(submitButton).toBeInTheDocument();\n  expect(cancelButton).toBeInTheDocument();\n\n\n});","type":"code","id":"18vcc"},{"content":"function MoreNames() {\n  return (\n    <div>\n      <label htmlFor=\"email\">Email</label>\n      <input id=\"email\"/>\n      <label htmlFor=\"search\">Search</label>\n      <input id=\"search\"/>\n    </div>\n  )\n}\n\nrender(<MoreNames />);","type":"code","id":"on0z2"},{"content":"test('shows an email and search input', () => {\n\n  render(<MoreNames />);\n\n  const  email = screen.getByRole(\"textbox\", {\n    name: /email/i\n  });\n\n  const  search = screen.getByRole(\"textbox\", {\n    name: /search/i\n  });\n\n  expect(email).toBeInTheDocument();\n  expect(search).toBeInTheDocument();\n});","type":"code","id":"4fs9w"},{"content":"function IconButtons() {\n  return (\n    <div>\n      <button aria-label=\"sign in\">\n        <svg />\n      </button>\n      <button aria-label=\"sign out\">\n        <svg />\n      </button>\n    </div>\n  )\n}\n\nrender(<IconButtons />);","type":"code","id":"mp2c5"},{"content":"test('find elements based on label', () => {\n  render(<IconButtons />);\n\n  const signInButton = screen.getByRole('button', {\n    name: /sign in/i\n  });\n  const signOutButton = screen.getByRole('button', {\n    name: /sign out/i\n  });\n  \n  expect(signInButton).toBeInTheDocument();\n  expect(signOutButton).toBeInTheDocument();\n\n})","type":"code","id":"pay4r"},{"content":"","type":"text","id":"auq4p"},{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"","type":"text","id":"vtnz8"},{"content":"import React, { useState } from 'react';\nimport { render, screen } from '@testing-library/react';\nimport user from '@testing-library/user-event';\n\nconst Counter = () => {\n  const [count, setCount] = useState(0);\n  return <button onClick={() => setCount((c) => c + 1)}>\n    Count: {count}\n  </button>\n};\nrender(<Counter />);","type":"code","id":"az9bh"},{"content":"test('it shows a button', () => {\n  render(<Counter />);\n\n  const button = screen.getByRole('button');\n\n  expect(\n    button\n  ).toBeInTheDocument();\n});\n","type":"code","id":"ngyzj"},{"content":"test('it doesnt show an input', () => {\n  render(<Counter />);\n\n  const input = screen.queryByRole('textbox');\n  \n  expect(\n    input\n  ).not.toBeInTheDocument();\n});\n","type":"code","id":"hgs1s"}]